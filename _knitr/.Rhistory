library("PopGenome")
library("ggplot2")
library("reshape")
GENOME.class <- readData("alignments/", FAST=TRUE)
GENOME.class <- readData("alignments/", FAST=FALSE)
library("PopGenome")
library("ggplot2")
library("reshape")
#setwd("/Users/chet/uky/")
GENOME.class <- readData("alignments/", FAST=FALSE)
clade_list <- read.table(file = "clade_list.txt", header=TRUE)
kable(clade_list)
wheats = as.character(clade_list[clade_list$Host == 'Triticum',2])
Oryza = as.character(clade_list[clade_list$Host == 'Oryza',2])
Eleusine = as.character(clade_list[clade_list$Host == 'Eleusine',2])
Setaria = as.character(clade_list[clade_list$Host == 'Setaria', 2])
Lolium = as.character(clade_list[clade_list$Host == 'Lolium', 2])
Brom = as.character(clade_list[clade_list$Host == 'Bromus', 2])
Sten = as.character(clade_list[clade_list$Host == 'Stenotaphrum', 2])
#trim .fasta from these?
head(GENOME.class@n.sites) #Confirm that sites are loaded in and have names
GENOME.class <- set.populations(GENOME.class, list(wheats, Oryza, Eleusine, Setaria, Lolium, Brom, Sten))  ##assign populations
GENOME.class <- diversity.stats(GENOME.class)
GENOME.class <- F_ST.stats(GENOME.class)
wheats
Oryza
clade_list
wheats = as.character(clade_list[clade_list$HostGenus == 'Triticum',2])
wheats
wheats = as.character(clade_list[clade_list$HostGenus == 'Triticum',3])
wheats
wheats = as.character(clade_list[clade_list$HostGenus == 'Triticum',3])
Oryza = as.character(clade_list[clade_list$HostGenus == 'Oryza',3])
Eleusine = as.character(clade_list[clade_list$HostGenus == 'Eleusine',3])
Setaria = as.character(clade_list[clade_list$HostGenus == 'Setaria', 3])
Lolium = as.character(clade_list[clade_list$HostGenus == 'Lolium', 3])
Brom = as.character(clade_list[clade_list$HostGenus == 'Bromus', 3])
Sten = as.character(clade_list[clade_list$HostGenus == 'Stenotaphrum', 3])
wheats
GENOME.class <- set.populations(GENOME.class, list(wheats, Oryza, Eleusine, Setaria, Lolium, Brom, Sten))  ##assign populations
GENOME.class <- diversity.stats(GENOME.class)
GENOME.class <- F_ST.stats(GENOME.class)
FST_by_locus<- get.F_ST(GENOME.class)
FSTbypop<-GENOME.class@hap.diversity.within
hist(FST_by_locus[,2], main = "FST for all loci, all populations", xlab = "FST", ylab =  "number of loci")
GENOME.class <- set.populations(GENOME.class, list(wheats, Lolium))  ##assign populations
GENOME.class <- diversity.stats(GENOME.class)
GENOME.class <- F_ST.stats(GENOME.class)
FST_by_locus<- get.F_ST(GENOME.class)
hist(FST_by_locus[,2], main = "nucleotide FST for all loci, just wheat/lolium", xlab = "FST", ylab =  "number of loci")
GENOME.class
GENOME.class@populations
clade_list2 <- read.table(file = "Clade_list_pgt.txt.txt", header=TRUE)
clade_list2 <- read.table(file = "Clade_list_pgt.txt", header=TRUE)
kable(clade_list2)
library('swirl')
read.table(file = "clade_list.txt", header=TRUE)
install.packages("swirl")
swirl()
swirl
library("swirl")
swirl()
getwd()
setwd("/Users/chet/")
getwd()
load("filename.RDA")
load("expr.maps.rda")
loadedData <- load("expr.maps.rda")
str(loadedData)
loadedData
swirl()
5+7
x <- 5+ 7
x
x -3
ls()
remove("fake_align")
remove("resampled")
remove"GeGENOME.class"
rm(list = ls())
rm(list = ls())
shiny::runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
library(shiny)
require(ggplot2)
require(dplyr)
source("/Users/chet/uky/SNP_density_windows/R/HelperScripts.R")
winSize = 1000
Br7raw <- read.table("/Users/chet/uky/SNP_density_windows/inputData/Br7WindowsAvgMin.txt", header=TRUE)
Br7df <- Br7raw %>% group_by(Scaffold, start) %>%
transform(adjustedSNP= ((winSize-minSNPs)/winSize)*100 )
Br7Lengths<- read.table("/Users/chet/uky/SNP_density_windows/inputData/Br7LengthFile", header=TRUE)
chosenDF <- Br7df
scaffoldList<-(chosenDF$Scaffold)
scafoldL
scaffoldList
scaffoldList<-unique(chosenDF$Scaffold)
scaffoldList
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
as.character(unique(unlist(chosenDF$Scaffold)))
as.character(unique((chosenDF$Scaffold)))
(unique((chosenDF$Scaffold)))
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
head(chosenDF)
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
head(chosenDF)
scaffoldListDF<- chosenDF %>%select(Scaffold, start)  %>% group_by(Scaffold) %>% summarise(windowCount= n())
scaffoldListDF
chosenDF %>%select(Scaffold, start)  %>% group_by(Scaffold) %>% summarise(windowCount= n())
chosenDF %>%select(Scaffold, start)
chosenDF %>%select(Scaffold, start)
chosenDF %>%select(Scaffold, start)  %>%distinct(Scaffold, start)%>% group_by(Scaffold) %>% summarise(windowCount= n())
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
scaffoldListDF
scaffoldListDF$Scaffold
as.character(scaffoldListDF$Scaffold)
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
scaffoldListDF<-  chosenDF %>%select(Scaffold, start)  %>%distinct(Scaffold, start)%>% group_by(Scaffold) %>% summarise(windowCount= n())
library(shiny)
chosenDF  %>%  filter(  Scaffold == input$scaffoldInput)
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
head(chosenDF)
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
?selectInput
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
runApp('uky/SNP_density_windows/ShinyViewSNPWindows')
getwd()
shiny::runApp('uky/SNPdensityShinyDraft')
p<- ggplot(data =  df.melt, aes(x= pos, y= value, color= variable))+   geom_bar() +ggtitle ("Chr2 Ancestral probability")
library(ggplot2)
library(RColorBrewer)
library(reshape)
setwd("/Users/chet/uky/ChromoPainter/")
df<- read.table("Resources/Chr2_no_indel.copyprobsperlocus.out", header = TRUE)
df<- read.table("Resources/Chr2_no_indel.copyprobsperlocus.out", header = TRUE)
df.melt <- melt(df, id="pos")
p<- ggplot(data =  df.melt, aes(x= pos, y= value, color= variable))+   geom_bar() +ggtitle ("Chr2 Ancestral probability")
p
p<- ggplot(data =  df.melt, aes(x= pos, y= value, color= variable))+   geom_bar(stat = "identity") +ggtitle ("Chr2 Ancestral probability")
p
p<- ggplot(data =  df.melt, aes(x= pos, y= value, fill= variable))+   geom_bar(stat = "identity", space = 0) +ggtitle ("Chr2 Ancestral probability")
?geom_bar
p<- ggplot(data =  df.melt, aes(x= pos, y= value, fill= variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")
p
myCols <- cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
display.brewer.all()
display.brewer.all()
cols <- brewer.pal(5,"Set3")
cols
df %>% transform(position = pos/1000000)
library(dplyr)
df <- df %>% transform(position = pos/1000000)
head(df)
df <- df %>% transform(position = pos/1000000) %>% select( -c("pos"))
df <- df %>% transform(position = pos/1000000) %>% select( -one_of("pos"))
head(df)
df.melt <- melt(df, id="position")
pdfName<- paste("output1-31-17.pdf")
pdf(pdfName,2, 11)
myCols <- cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442")
ggplot(data =  df.melt, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)
ggplot(data =  df.melt, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)
dev.off()
dev.off()
p<- ggplot(data =  df.melt, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)
plot(p)
?plot
p
head(df.melt)
max(df.melt$position)
gapcheck <- df.melt %>% filter(position > 2 && position < 3)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
head(gpacheck)
head(gapcheck)
gapcheck <- df.melt %>% filter( position < 3)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df.melt %>% filter( position < 2.5) filter (position > 2)
gapcheck <- df.melt %>% filter( position < 2.5)%>% filter (position > 2)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df.melt %>% filter( position < 2.2)%>% filter (position > 2.3)
head(gapcheck)
gapcheck
gapcheck <- df.melt %>% filter( position < 2.5)%>% filter (position > 2)
head(gapcheck)
gapcheck <- df.melt %>% filter( position < 2.3)%>% filter (position > 2.2)
head(gapcheck)
nrow(gapcheck)
head(df)
gapcheck <- df %>% filter( position < 2.3)%>% filter (position > 2.2)
head(gapcheck)
nrow(gapcheck)
gapcheck <- df.melt %>% filter( position < 2.3)%>% filter (position > 2.2)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df.melt %>% filter( position < 2.275)%>% filter (position > 2.50)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df.melt %>% filter( position < 2.275)%>% filter (position > 2.50)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df %>% filter( position < 2.275)%>% filter (position > 2.50)
head(gapcheck)
gapcheck <- df.melt %>% filter( position < 2.275)%>% filter (position > 2.40)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df.melt %>% filter( position < 2.5)%>% filter (position > 2.275)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df %>% filter( position < 2.5)%>% filter (position > 2.275)
gapcheck <- df.melt %>% filter( position < 2.5)%>% filter (position > 2.275)
ggplot(data =  gapcheck, aes(x= position, y= value, color=variable, fill = variable))+   geom_bar(stat = "identity", ) +ggtitle ("Chr2 Ancestral probability")+  scale_colour_manual(values=myCols) + scale_fill_manual(values=myCols)+xlab("Chromosome position (MB)")+ylab("Ancestry percent likelihood")
gapcheck <- df %>% filter( position < 2.5)%>% filter (position > 2.275)
head(gapcheck)
nrow(gapcheck)
gapcheck <- df %>% filter( position < 2.45)%>% filter (position > 2.4)
gapcheck
nrow(gapcheck)
sort(gapcheck)
sort(gapcheck, position)
sort(gapcheck, "position")
?sort
gapcheck <- df %>% filter( position < 2.45)%>% filter (position > 2.4) %>% arrange(position)
gapcheck
library('dplyr')
df<- read.table("/Users/chet/Dropbox/elastic_search.csv", sep = ",", fill = FALSE)
df<- df[,1:3]
head(df)
df %>% group_by(V1) %>% summarise(count = n()) %>% filter(count >1)
dups <- df %>% group_by(V1) %>% summarise(count = n()) %>% filter(count >1)
dups
write.table(dups, file = "duplicate_entries", sep=",")
nrow(dups)
library(stringr)
str_split_fixed(df$V1, ",", 2)
head(df)
str_split_fixed(df$V1, ", ", 2)
?split
require(reshape)
dfnew = transform(df, V1 = colsplit(name, split = ", ", names = c('ID', 'page')))
dfnew = transform(df, V1 = colsplit(V1, split = ", ", names = c('ID', 'page')))
head(dfnew)
knitr::opts_chunk$set(echo = TRUE)
attach(cars)
df
head(cars)
cars
head(cars)
kable(cars)
require(knitr)
kable(cars)
kable(cars[,1:10])
kable(cars[1:10,])
attach(mtcars)
head(mtcars)
qplot(mpg, drat, data=mtcars, color=cyl,
facets=gear)
require(ggplot2)
qplot(mpg, drat, data=mtcars, color=cyl,
facets=gear)
qplot(mpg, drat, data=mtcars, color=cyl)
qplot(mpg, drat, data=mtcars, color=cyl, title="mpg vs drat mtcars")
qplot(mpg, drat, data=mtcars, color=cyl, main="mpg vs drat mtcars")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/chet/bradfordcondon.github.io/_knitr/")
require("render_post.R")
require(".render_post.R")
getwd()
setwd("/Users/chet/bradfordcondon.github.io/_knitr/")
require(".render_post.R")
require("/Users/chet/bradfordcondon.github.io/_knitr/render_post.R")
options(stringsAsFactors = FALSE)
KnitPost <- function(bashwd = "", convert_file = "", overwrite = FALSE) {
# CONVERT ALL RMD FILES TO MARKDOWN?
#    REQUIRED: overwrite
# CONVERT A SPECIFIC RMD FILE TO MARKDOWN?
#    REQUIRED: bashwd, convert_file
# bashwd: working directory (passed on from bash, only used below
#         if a specific Rmd file is to be converted)
# convert_file: name/path to specific Rmd file to convert
# overwrite: flag that tells us whether to overwrite md files
#            when converting all Rmd files
# directory of jekyll blog (including trailing slash)
site.path <- "/Users/chet/bradfordcondon.github.io/"
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_knitr")
# directory to save figures
fig.dir <- "assets/knitr/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts")
# cache
cache.path <- paste0(site.path, "_cache")
require(knitr)
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(
base.url = "/",
base.dir = site.path)
opts_chunk$set(
fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
if (convert_file == "") {
# convert all Rmd files in {site-url}/_knitr/ to markdown files
# contingent on whether overwrite requested and if md exists
# setwd to Rmd folder
setwd(rmd.path)
files.rmd <-
data.frame(rmd = list.files(
path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <-
file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
# check if corresponding md file exists for each Rmd file,
# if not, set flag to convert to markdown
# (also consider the overwrite flag set by user)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ====
message(paste0("=== KnitPost(overwrite=", overwrite, "): ",
basename(files.rmd$rmd[i])))
out.file <-
knit(files.rmd$rmd[i],
output = files.rmd$corresponding.md.file[i],
envir = parent.frame(),
quiet = TRUE)
}
}
} else {
# convert a single Rmd file to markdown
# setwd to bash pwd
setwd(bashwd)
convert.path <- paste0(bashwd, "/", convert_file)
md.path <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = convert_file)))
# KNITTING ====
message(paste0("=== KnitPost(", convert.path, ")"))
out.file <-
knit(convert.path,
output = md.path,
envir = parent.frame(),
quiet = TRUE)
}
}
KnitPost
KnitPost
KnitPost()
KnitPost()
KnitPost()
